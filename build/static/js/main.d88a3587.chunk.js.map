{"version":3,"sources":["App.js","index.js"],"names":["App","activePanel","id","title","align","src","width","ReactDOM","render","document","getElementById","blob","recordingState","WaveRecorder","exports","flattenArray","channelBuffer","recordingLength","result","Float32Array","offset","i","length","buffer","set","writeUTFBytes","view","descriptor","setUint8","charCodeAt","interleave","leftChannel","rightChannel","inputIndex","index","encodeWav","volume","samples","channels","sampleRate","ArrayBuffer","DataView","setUint32","setUint16","setInt16","defaultOptions","bufferSize","start","a","async","options","state","channelData","navigator","mediaDevices","getUserMedia","audio","stream","context","AudioContext","mediaStream","createMediaStreamSource","recorder","createScriptProcessor","onaudioprocess","audioEvent","channelDatum","inputBuffer","getChannelData","push","connect","destination","stop","disconnect","close","leftBuffer","dataView","Blob","type","play","send","ins_image","rec_gif","is_rec","addEventListener","setAttribute","url","window","URL","createObjectURL","Audio","formdata","FormData","append","console","log","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","onload","this","status","onerror"],"mappings":"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","file":"static/js/main.d88a3587.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport View from '@vkontakte/vkui/dist/components/View/View';\r\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\nimport {Panel, PanelHeader, Group, List, Cell, Button,Div } from '@vkontakte/vkui';\r\n\r\n\r\nimport Home from './panels/Home';\r\n//import Persik from './panels/Persik';\r\n\r\n\r\nconst onStop = (blob) => {\r\n\t// Do something with the blob file of the recording\r\n  }\r\n\r\nfunction App () {\r\n\treturn (\r\n\t\t\r\n\t  <View activePanel=\"main\">\r\n\t\t  \r\n\t\t<Panel id=\"main\">\r\n\t\t  <PanelHeader>Покричи в подушку</PanelHeader>\r\n\t\t  <Group title=\"buttons\">\r\n\t\t\t<div>\r\n\t\t\t<Button id='rec'>start</Button>\r\n\t\t\t\r\n\t\t\t\t<Button id='stop'>stop</Button>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t  </Group>\r\n\t\t  <Group>\r\n      <Div align=\"center\">\r\n        Выговорись в подушку в конце дня\r\n      </Div>\r\n    </Group>\r\n\t<Div id=\"text1\" align=\"center\">\t\r\n\t\tПриложение прослушает вашу речь, пределит настроение \r\n\t\tи если оно плохое, предложит как его улучшить.\r\n      </Div>\r\n\t  <img id=\"talk\"></img>\r\n\t  <Group>\r\n\t\t  <img id=\"image\" src='/podushka.png' width='100%'></img>\r\n\r\n\t  </Group>\r\n\t  <Group>\r\n\t  <Button id='play_pause'>Прослушать</Button>\r\n\t  <Button id='ff'>Отправить</Button>\r\n\t  </Group>\r\n\t\t</Panel>\r\n\t  </View>\r\n\t  \r\n\t);\r\n  }\r\n\t\r\n\r\n\r\n \r\n\r\nexport default App;\r\n\r\n","import 'core-js/features/map';\r\nimport 'core-js/features/set';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport connect from '@vkontakte/vk-connect';\r\nimport App from './App';\r\nimport { View, Panel, PanelHeader, Group, List, Cell } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n//import src from '*.gif';\r\n\r\n\r\n//import WaveRecorder from './web-audio-wave-recorder';\r\n\r\n\r\n\r\n// import registerServiceWorker from './sw';\r\n\r\n// Init VK  Mini App\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\nvar WaveRecorder = (function (exports) {\r\n\t'use strict';\r\n  \r\n\tconst flattenArray = (channelBuffer, recordingLength) => {\r\n\t\tvar result = new Float32Array(recordingLength);\r\n\t\tlet offset = 0;\r\n\t\tfor (let i = 0; i < channelBuffer.length; i++) {\r\n\t\t\tconst buffer = channelBuffer[i];\r\n\t\t\tresult.set(buffer, offset);\r\n\t\t\toffset += buffer.length;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\tconst writeUTFBytes = (view, offset, descriptor) => {\r\n\t\tfor (let i = 0; i < descriptor.length; i++) {\r\n\t\t\tview.setUint8(offset + i, descriptor.charCodeAt(i));\r\n\t\t}\r\n\t};\r\n\tconst interleave = (leftChannel, rightChannel) => {\r\n\t\tconst length = leftChannel.length + rightChannel.length;\r\n\t\tconst result = new Float32Array(length);\r\n\t\tlet inputIndex = 0;\r\n\t\tfor (let index = 0; index < length;) {\r\n\t\t\tresult[index++] = leftChannel[inputIndex];\r\n\t\t\tresult[index++] = rightChannel[inputIndex];\r\n\t\t\tinputIndex++;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\tconst encodeWav = ({ volume, samples, channels, sampleRate, }) => {\r\n\t\tconst buffer = new ArrayBuffer(44 + samples.length * 2);\r\n\t\tconst view = new DataView(buffer);\r\n\t\twriteUTFBytes(view, 0, 'RIFF');\r\n\t\tview.setUint32(4, 44 + samples.length * 2, true);\r\n\t\twriteUTFBytes(view, 8, 'WAVE');\r\n\t\twriteUTFBytes(view, 12, 'fmt ');\r\n\t\tview.setUint32(16, 16, true);\r\n\t\tview.setUint16(20, 1, true);\r\n\t\tview.setUint16(22, channels, true);\r\n\t\tview.setUint32(24, sampleRate, true);\r\n\t\tview.setUint32(28, sampleRate * (channels * 2), true);\r\n\t\tview.setUint16(32, 4, true);\r\n\t\tview.setUint16(34, 16, true);\r\n\t\twriteUTFBytes(view, 36, 'data');\r\n\t\tview.setUint32(40, samples.length * 2, true);\r\n\t\tlet index = 44;\r\n\t\tfor (let i = 0; i < samples.length; i++) {\r\n\t\t\tview.setInt16(index, samples[i] * (0x7fff * volume), true);\r\n\t\t\tindex += 2;\r\n\t\t}\r\n\t\treturn view;\r\n\t};\r\n  \r\n\tconst defaultOptions = {\r\n\t\tvolume: 1,\r\n\t\tchannels: 1,\r\n\t\tbufferSize: 2048,\r\n\t\tsampleRate: 44100,\r\n\t};\r\n\tconst start = async (options = {}) => {\r\n\t\tconst { volume, channels, bufferSize, sampleRate } = {\r\n\t\t\t...defaultOptions,\r\n\t\t\t...options,\r\n\t\t};\r\n\t\tconst state = {\r\n\t\t\tchannelData: [],\r\n\t\t\trecordingLength: 0,\r\n\t\t};\r\n\t\tconst stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n\t\tconst context = new AudioContext();\r\n\t\tconst mediaStream = context.createMediaStreamSource(stream);\r\n\t\tconst recorder = context.createScriptProcessor(bufferSize, channels, channels);\r\n\t\trecorder.onaudioprocess = (audioEvent) => {\r\n\t\t\tfor (let i = 0; i < channels; i++) {\r\n\t\t\t\tconst channelDatum = new Float32Array(audioEvent.inputBuffer.getChannelData(i));\r\n\t\t\t\tstate.channelData[i]\r\n\t\t\t\t\t? state.channelData[i].push(channelDatum)\r\n\t\t\t\t\t: (state.channelData[i] = [channelDatum]);\r\n\t\t\t}\r\n\t\t\tstate.recordingLength += bufferSize;\r\n\t\t};\r\n\t\tmediaStream.connect(recorder);\r\n\t\trecorder.connect(context.destination);\r\n\t\treturn {\r\n\t\t\tstate,\r\n\t\t\tvolume,\r\n\t\t\tcontext,\r\n\t\t\trecorder,\r\n\t\t\tsampleRate,\r\n\t\t\tmediaStream,\r\n\t\t};\r\n\t};\r\n\tconst stop = async (recordingState) => {\r\n\t\tconst { state: { channelData, recordingLength }, volume, context, recorder, sampleRate, mediaStream, } = recordingState;\r\n\t\trecorder.disconnect(context.destination);\r\n\t\tmediaStream.disconnect(recorder);\r\n\t\tawait context.close();\r\n\t\tconst leftBuffer = flattenArray(channelData[0], recordingLength);\r\n\t\tconst samples = channelData.length === 2\r\n\t\t\t? interleave(leftBuffer, flattenArray(channelData[1], recordingLength))\r\n\t\t\t: leftBuffer;\r\n\t\tconst dataView = encodeWav({\r\n\t\t\tvolume,\r\n\t\t\tsamples,\r\n\t\t\tchannels: channelData.length,\r\n\t\t\tsampleRate,\r\n\t\t});\r\n\t\treturn new Blob([dataView], { type: 'audio/wav' });\r\n\t};\r\n  \r\n\texports.start = start;\r\n\texports.stop = stop;\r\n  \r\n\treturn exports;\r\n  \r\n  }({}));\r\n  \r\n \r\n\r\n  const start = document.getElementById('rec')\r\n  const stop = document.getElementById('stop')\r\n  const play = document.getElementById('play_pause')\r\n  const send = document.getElementById('ff')\r\n  \r\n  const ins_image = document.getElementById('image')\r\n  const text1 = document.getElementById('text1')\r\n  const rec_gif = document.getElementById('talk')\r\n\r\n  let blob\r\n  let recordingState\r\n\r\n  var is_rec = false;\r\n\r\n  \r\n \r\n  ins_image.addEventListener('click', async () => {\r\n\t  if(is_rec === false) {recordingState = await WaveRecorder.start();\r\n\t\trec_gif.setAttribute('src','talk.gif')\r\n\tins_image.setAttribute('src','/podushka_2.png')\r\nis_rec = true\r\nreturn}\r\nif (!recordingState) {\r\n\treturn\r\n  }\r\n  blob = await WaveRecorder.stop(recordingState)\r\n  recordingState = null\r\n  ins_image.setAttribute('src','/podushka.png')\r\n  is_rec = false\r\n  rec_gif.setAttribute('src','')\r\n\t\r\n})\r\n\r\n  start.addEventListener('click', async () => {\r\n\trecordingState = await WaveRecorder.start()\r\n\tins_image.setAttribute('src','/podushka_2.png')\r\n\t\r\n  })\r\n  \r\n  stop.addEventListener('click', async () => {\r\n\tif (!recordingState) {\r\n\t  return\r\n\t}\r\n\tblob = await WaveRecorder.stop(recordingState)\r\n\trecordingState = null\r\n\tins_image.setAttribute('src','/podushka.png')\r\n  })\r\n  \r\n  play.addEventListener('click', () => {\r\n\tif (!blob) {\r\n\t  return\r\n\t}\r\n\tconst url = window.URL.createObjectURL(blob)\r\n\tconst audio = new Audio(url)\r\n\taudio.play()\r\n  })\r\n  \r\n \r\n\r\n  send.addEventListener('click', () => {\r\n\tif (!blob) {\r\n\t  return\r\n\t}\r\n\t\t\r\n\tvar formdata = new FormData();\r\n\tformdata.append('soundBlob', blob, 'filetosave1.wav')\r\n\tvar serverUrl = 'http://95.183.8.189:5000/upload';\r\n\r\n\tconsole.log(123);\r\n\r\n\tvar xhr = new XMLHttpRequest();\r\n\txhr.open('POST', serverUrl, true,'root','aVsqBbYmp4');\r\n\t\r\n\txhr.setRequestHeader('Content-Type', 'multipart/form-data');\r\n\t\r\n\r\n\txhr.onreadystatechange = function() {//Call a function when the state changes.\r\n    if(xhr.readyState === 4) {\r\n\t\tconsole.log('onreadystatechange  '+xhr.readyState);\r\n\t\tins_image.setAttribute('src','http://95.183.8.189:5000/get_image');\r\n\r\n\t\t\r\n\t}}\r\n\t\r\n\r\n\txhr.onload = function() {\r\n\t\tconsole.log(this.status);\r\n\t}\r\n\txhr.onerror = function() {\r\n\t\tconsole.log('error'+this.status);\r\n\t}\r\n\txhr.send(formdata);\r\n\tconsole.log(1245663);\r\n\tconsole.log(xhr.readyState);\r\n/*\r\n\tvar in_image = function(){\r\n\t\t\r\n\t\t\tins_image.setAttribute('src','http://95.183.8.189:5000/get_image');\r\n\t\t\tconsole.log('in_image');\r\n\t\t\r\n\t}\r\n\r\n\tconsole.log(xhr.readyState);\r\n\tsetTimeout(in_image(),5000);\r\n*/\r\n/*\r\n\tvar xhr_get = new XMLHttpRequest();\r\n\txhr_get.open('GET', 'http://95.183.8.189:5000/test_image',true)\r\n\tconsole.log('OPENED: ', xhr_get.status);\r\n\r\n\txhr_get.send(null);\r\n\tconsole.log('  ', xhr_get.status +'   '+  xhr_get.readyState);\r\n\r\n\t  \r\n\txhr_get.onload = function () {\r\n\t\tconsole.log(xhr_get.response);\r\n\t};\r\n\r\n\txhr_get.onerror = function() {\r\n\t\tconsole.log('error'+this.status+this.readyState+' '+this.response);\r\n\t}\r\n\tconsole.log(123);\r\n\t*/\r\n\t\r\n  })\r\n\r\n\r\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\r\n// расскомментируйте строку с registerServiceWorker();\r\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\r\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT\r\n// registerServiceWorker();\r\n"],"sourceRoot":""}